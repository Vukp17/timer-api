// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  refreshToken String?

  projects  Project[]
  timers    Timer[]
  expenses  Expense[]

  Client Client[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  userId      Int
  clientId    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hourlyRate  Float @default(0)
  currency    String @default("EUR")
  color       String @default("#000000")
  user        User      @relation(fields: [userId], references: [id])
  client      Client?   @relation(fields: [clientId], references: [id])
  timers      Timer[]
  expenses    Expense[]
  status      ProjectStatus @default(ACTIVE)
}

model Timer {
  id          Int       @id @default(autoincrement())
  startTime   DateTime
  endTime     DateTime?
  duration    Int?      // Duration in seconds (calculated from start and end time)
  description String?
  userId      Int
  projectId   Int?
  tagId       Int?
  hourlyRate  Float @default(0)
  user        User      @relation(fields: [userId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  tag         Tag?      @relation(fields: [tagId], references: [id])
}

model Client {
  id         Int       @id @default(autoincrement())
  name       String
  email      String?
  phone      String?
  address    String?
  userId     Int

  user       User      @relation(fields: [userId], references: [id])
  projects   Project[]
}

model Tag {
  id         Int       @id @default(autoincrement())
  name       String
  color      String    // Hex color for the tag
  userId     Int
  timers     Timer[]   // A Tag can be associated with multiple Timers
}

model Expense {
  id         Int       @id @default(autoincrement())
  name       String
  amount     Float
  date       DateTime  @default(now())
  userId     Int
  projectId  Int?

  user       User      @relation(fields: [userId], references: [id])
  project    Project?  @relation(fields: [projectId], references: [id])
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}
